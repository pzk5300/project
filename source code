project/
├── app/
│   ├── __init__.py
│   ├── routes.py
│   ├── utils.py
│   └── templates/
│       └── index.html
├── data/
│   ├── historical_data.csv
│   └── shelters.json
├── requirements.txt
├── run.py
└── README.md

from flask import Flask

from collections import deque
from heapq import heappush, heappop

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def display(self):
        current = self.head
        while current:
            print(current.data, end=' -> ')
            current = current.next
        print("None")

class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)

    def pop(self):
        return self.stack.pop() if self.stack else None

    def peek(self):
        return self.stack[-1] if self.stack else None

class EvacuationQueue:
    def __init__(self):
        self.queue = deque()

    def enqueue(self, route):
        self.queue.append(route)

    def dequeue(self):
        return self.queue.popleft() if self.queue else None

class MinHeap:
    def __init__(self):
        self.heap = []

    def push(self, priority, task):
        heappush(self.heap, (priority, task))

    def pop(self):
        return heappop(self.heap) if self.heap else None

class Graph:
    def __init__(self):
        self.adjacency_list = {}

    def add_edge(self, start, end):
        if start not in self.adjacency_list:
            self.adjacency_list[start] = []
        if end not in self.adjacency_list:
            self.adjacency_list[end] = []
        self.adjacency_list[start].append(end)
        self.adjacency_list[end].append(start)

    def display(self):
        for node, neighbors in self.adjacency_list.items():
            print(f"{node} -> {', '.join(neighbors)}")

class HurricaneManagement:
    def __init__(self):
        self.event_log = LinkedList()
        self.evacuation_routes = EvacuationQueue()
        self.rescue_operations = MinHeap()
        self.hurricane_path = Graph()

    def log_event(self, event: str):
        self.event_log.append(event)

    def add_evacuation_route(self, route: str):
        self.evacuation_routes.enqueue(route)

    def add_rescue_operation(self, priority: int, task: str):
        self.rescue_operations.push(priority, task)

    def add_hurricane_path(self, start: str, end: str):
        self.hurricane_path.add_edge(start, end)

    def display_logs(self):
        print("Hurricane Event Log:")
        self.event_log.display()

    def next_evacuation_route(self):
        route = self.evacuation_routes.dequeue()
        print(f"Next evacuation route: {route}")

    def next_rescue_operation(self):
        operation = self.rescue_operations.pop()
        if operation:
            print(f"Next rescue operation: Priority {operation[0]}, Task: {operation[1]}")
        else:
            print("No rescue operations available.")

    def display_hurricane_path(self):
        print("Hurricane Path:")
        self.hurricane_path.display()

if __name__ == "__main__":
    system = HurricaneManagement()

    system.log_event("Category 4 hurricane detected near Florida.")
    system.log_event("Hurricane downgraded to Category 3.")

    system.add_evacuation_route("Route A: Coastal to Inland")
    system.add_evacuation_route("Route B: Northern Highway")

    system.add_rescue_operation(1, "Deploy emergency supplies to Shelter A")
    system.add_rescue_operation(2, "Evacuate residents from Zone C")

    system.add_hurricane_path("Florida", "Georgia")
    system.add_hurricane_path("Georgia", "South Carolina")

    system.display_logs()
    system.next_evacuation_route()
    system.next_rescue_operation()
    system.display_hurricane_path()
