project/
├── app/
│   ├── __init__.py
│   ├── routes.py
│   ├── utils.py
│   └── templates/
│       └── index.html
├── data/
│   ├── historical_data.csv
│   └── shelters.json
├── requirements.txt
├── run.py
└── README.md

from flask import Flask

def create_app():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = 'your_secret_key'
    return app

import requests
import os

def fetch_hurricane_data():
    api_key = os.getenv('HURRICANE_API_KEY')
    url = f"https://api.weather.gov/hurricanes?apikey={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": "Unable to fetch data"}

import pandas as pd
from sklearn.ensemble import RandomForestRegressor

def predict_hurricane_path(current_data, historical_data_path="data/historical_data.csv"):
    # Load historical data
    data = pd.read_csv(historical_data_path)
    features = ['latitude', 'longitude', 'wind_speed']
    X_train = data[features]
    y_train = data['next_latitude'], data['next_longitude']
    
    # Train model
    model = RandomForestRegressor()
    model.fit(X_train, y_train)

    # Predict next position
    prediction = model.predict([[
        current_data['latitude'],
        current_data['longitude'],
        current_data['wind_speed']
    ]])
    return prediction

import networkx as nx

def optimize_route(graph_data, start, end):
    G = nx.Graph()
    for edge in graph_data['edges']:
        G.add_edge(edge['start'], edge['end'], weight=edge['distance'])
    return nx.shortest_path(G, source=start, target=end, weight='weight')

from flask import Blueprint, render_template, jsonify, request
from .utils import fetch_hurricane_data, predict_hurricane_path, optimize_route

main = Blueprint('main', __name__)

@main.route('/')
def index():
    return render_template('index.html')

@main.route('/hurricane', methods=['GET'])
def hurricane_data():
    data = fetch_hurricane_data()
    return jsonify(data)

@main.route('/predict', methods=['POST'])
def predict_path():
    current_data = request.json
    prediction = predict_hurricane_path(current_data)
    return jsonify({"predicted_path": prediction})

@main.route('/evacuate', methods=['POST'])
def evacuate():
    start = request.json['start']
    end = request.json['end']
    graph_data = {
        "edges": [
            {"start": "A", "end": "B", "distance": 10},
            {"start": "B", "end": "C", "distance": 15},
            {"start": "A", "end": "C", "distance": 20}
        ]
    }
    route = optimize_route(graph_data, start, end)
    return jsonify({"route": route})

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hurricane Monitoring</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Hurricane Monitoring Dashboard</h1>
    <div id="map"></div>
    <script>
        fetch('/hurricane')
            .then(response => response.json())
            .then(data => {
                console.log(data); // Use Plotly to visualize the data
            });
    </script>
</body>
</html>

from app import create_app
from app.routes import main

app = create_app()
app.register_blueprint(main)

if __name__ == '__main__':
    app.run(debug=True)
